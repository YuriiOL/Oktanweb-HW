//1 -  Створити функцію конструктор для об'єкту який описує теги
// Властивості
// -назва тегу
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
// інформацію брати з htmlbook.ru
//
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select
// Приклад результату
// {
//     titleOfTag: 'area',
//     action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//     attrs: [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//     {/*some props and values*/},
//     {/*...*/},
//     {/*...*/},
// ]
//
// }
// function TegInfo(tag, info, attr){
//     this.tag = tag
//     this.info = info
//     this.attrs = attr
// }
// let a = new TegInfo(
//     'a',
//     'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
//     [{titleOfAttr:'accesskey', actionOfAttr:'Активация ссылки с помощью комбинации клавиш.'}, {titleOfAttr: 'name', actionOfAttr: 'Устанавливает имя якоря внутри документа.'}, {titleOfAttr: 'title',actionOfAttr: 'Добавляет всплывающую подсказку к тексту ссылки.' }]
// )
// console.log(a)
// let div = new TegInfo(
//     'div',
//     'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
//     [{titleOfAttr:'align', actionOfAttr:'Задает выравнивание содержимого тега <div>.'}, {titleOfAttr: 'title',actionOfAttr: 'Добавляет всплывающую подсказку к тексту ссылки.' }]
//     )
// console.log(div)
// let h1 = new TegInfo(
//     'h1',
//     'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
//     [{titleOfAttr:'align', actionOfAttr:'Определяет выравнивание заголовка.'}]
// )
// console.log(h1)
// let span = new TegInfo(
//     'span',
//     'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль. Например, внутри абзаца (тега <p>) можно изменить цвет и размер первой буквы, если добавить начальный и конечный тег <span> и определить для него стиль текста. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
//     [{actionOfAttr:'Для этого тега доступны универсальные атрибуты и события.'}]
// )
// console.log(span)
// let input = new TegInfo(
//     'input',
//     'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь контейнера <form>, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает серверная программа, то указывать <form> обязательно. То же самое обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript.',
//     [{titleOfAttr:'accesskey', actionOfAttr:'Активация ссылки с помощью комбинации клавиш.'}, {titleOfAttr: 'name', actionOfAttr: 'Устанавливает имя якоря внутри документа.'}, {titleOfAttr: 'title',actionOfAttr: 'Добавляет всплывающую подсказку к тексту ссылки.' }]
// )
// console.log(input)
// let form = new TegInfo(
//     'form',
//     'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.',
//     [{titleOfAttr: 'action',actionOfAttr:'Адрес программы или документа, который обрабатывает данные формы.'}]
//
//     )
// console.log(form)
// let option = new TegInfo(
//     'option',
//     'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
//     [{titleOfAttr: 'leabel',actionOfAttr:'Указание метки пункта списка.'}]
//     )
// console.log(option)
// let select = new TegInfo(
//     'select',
//     'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега <option>, который должен быть вложен в контейнер <select>. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
//     [{titleOfAttr:'accesskey', actionOfAttr:'Активация ссылки с помощью комбинации клавиш.'}, {titleOfAttr: 'name', actionOfAttr: 'Устанавливает имя якоря внутри документа.'}, {titleOfAttr: 'title',actionOfAttr: 'Добавляет всплывающую подсказку к тексту ссылки.' }]
//
// )
// console.log(select)

//2 ==============================================
// -  Створити класс  для об'єкту який описує теги
// Властивості
//  -назва тегу
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru
//
//  Таким чином описати теги
//  -a
//  -div
//  -h1
//  -span
//  -input
//  -form
//  -option
//  -select
//  Приклад результату
//    {
//         titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//         attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//         {/*some props and values*/},
//         {/*...*/},
//         {/*...*/},
//         ]
//
//    }
// ==============================================
// class TegInfo{
//     constructor(tag, info, attr) {
//         this.tag = tag
//         this.info = info
//         this.attrs = attr
//     }
// }
// let a = new TegInfo(
//     'a',
//     'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
//     [{titleOfAttr:'accesskey', actionOfAttr:'Активация ссылки с помощью комбинации клавиш.'}, {titleOfAttr: 'name', actionOfAttr: 'Устанавливает имя якоря внутри документа.'}, {titleOfAttr: 'title',actionOfAttr: 'Добавляет всплывающую подсказку к тексту ссылки.' }]
// )
// console.log(a)
// let div = new TegInfo(
//     'div',
//     'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
//     [{titleOfAttr:'align', actionOfAttr:'Задает выравнивание содержимого тега <div>.'}, {titleOfAttr: 'title',actionOfAttr: 'Добавляет всплывающую подсказку к тексту ссылки.' }]
//     )
// console.log(div)
// let h1 = new TegInfo(
//     'h1',
//     'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
//     [{titleOfAttr:'align', actionOfAttr:'Определяет выравнивание заголовка.'}]
// )
// console.log(h1)
// let span = new TegInfo(
//     'span',
//     'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить для нее свой стиль. Например, внутри абзаца (тега <p>) можно изменить цвет и размер первой буквы, если добавить начальный и конечный тег <span> и определить для него стиль текста. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
//     [{actionOfAttr:'Для этого тега доступны универсальные атрибуты и события.'}]
// )
// console.log(span)
// let input = new TegInfo(
//     'input',
//     'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь контейнера <form>, определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает серверная программа, то указывать <form> обязательно. То же самое обстоит и в случае обработки данных с помощью клиентских приложений, например, скриптов на языке JavaScript.',
//     [{titleOfAttr:'accesskey', actionOfAttr:'Активация ссылки с помощью комбинации клавиш.'}, {titleOfAttr: 'name', actionOfAttr: 'Устанавливает имя якоря внутри документа.'}, {titleOfAttr: 'title',actionOfAttr: 'Добавляет всплывающую подсказку к тексту ссылки.' }]
// )
// console.log(input)
// let form = new TegInfo(
//     'form',
//     'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.',
//     [{titleOfAttr: 'action',actionOfAttr:'Адрес программы или документа, который обрабатывает данные формы.'}]
//
//     )
// console.log(form)
// let option = new TegInfo(
//     'option',
//     'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
//     [{titleOfAttr: 'leabel',actionOfAttr:'Указание метки пункта списка.'}]
//     )
// console.log(option)
// let select = new TegInfo(
//     'select',
//     'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега <option>, который должен быть вложен в контейнер <select>. Если планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
//     [{titleOfAttr:'accesskey', actionOfAttr:'Активация ссылки с помощью комбинации клавиш.'}, {titleOfAttr: 'name', actionOfAttr: 'Устанавливает имя якоря внутри документа.'}, {titleOfAttr: 'title',actionOfAttr: 'Добавляет всплывающую подсказку к тексту ссылки.' }]
//
// )
// console.log(select)

//3==============================================
// - Створити об'єкт car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
// ==============================================
// let car = {
//     model: 'bmw',
//     developer: 'bmw-group',
//     year: 2020,
//     maxSpeed: 240,
//     engine: 5,
//     drive(){
//         console.log(`їдемо зі швидкістю ${this.maxSpeed} на годину`);
//     },
//     info () {
//         console.log(`${this.model}, ${this.developer}, ${this.year}, ${this.maxSpeed}, ${this.engine}`)
//     },
//     increaseMaxSpeed (newSpeed){
//         this.maxSpeed += newSpeed
//     },
//     changeYear (newValue){
//         this.year = newValue
//     },
//     addDriver (driver){
//         this.drive = driver
//     }
// }
// car.addDriver({name: 'Yurii', skills: 'Drift'})
// console.log(car.drive)

// 4==============================================
// - Створити функцію конструктор яка дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
// ==============================================
// function Car(model, developer, year, maxSpeed, engine) {
//     this.model = model
//     this.developer = developer
//     this.year = year
//     this.maxSpeed = maxSpeed
//     this.engine = engine
//     this.drive= function () {
//         console.log(`їдемо зі швидкістю ${this.maxSpeed} на годину`);
//     },
//     this.info=  function ()  {
//         console.log(`${this.model}, ${this.developer}, ${this.year}, ${this.maxSpeed}, ${this.engine}`)
//     },
//     this.increaseMaxSpeed=  function (newSpeed) {
//         this.maxSpeed += newSpeed
//     },
//     this.changeYear=  function (newValue){
//         this.year = newValue
//     },
//     this.addDriver=  function (driver){
//         this.drive = driver
//     }
// }
//
// let bmw = new Car('sdaf', 'sdafsad', 2222, 243, 2)
// bmw.drive()

// 5==============================================
// - Створити клас який дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:
// -- drive () - яка виводить в консоль "їдемо зі швидкістю {максимальна швидкість} на годину"
// -- info () - яка виводить всю інформацію про автомобіль
// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed
// -- changeYear (newValue) - змінює рік випуску на значення newValue
// -- addDriver (driver) - приймає об'єкт який "водій" з довільним набором полів, і доавляет його в поточний об'єкт car
// ==============================================
// class Car {
//     constructor(model, developer, year, maxSpeed, engine) {
//         this.model = model
//         this.developer = developer
//         this.year = year
//         this.maxSpeed = maxSpeed
//         this.engine = engine
//     }
//     drive() {
//         console.log(`їдемо зі швидкістю ${this.maxSpeed} на годину`);
//     }
//     info()  {
//         console.log(`${this.model}, ${this.developer}, ${this.year}, ${this.maxSpeed}, ${this.engine}`)
//     }
//     increaseMaxSpeed(newSpeed) {
//         this.maxSpeed += newSpeed
//     }
//     changeYear(newValue){
//         this.year = newValue
//     }
//     addDriver(driver){
//         this.drive = driver
//     }
// }
// let bmw = new Car('sdaf', 'sdafsad', 2222, 250, 2)
// bmw.drive()

// 6==============================================
// -створити класс попелюшка з полями ім'я, вік, розмір ноги
// --Створити 10 попелюшок , покласти їх в масив
// --Сторити об'єкт класу "принц" за допомоги класу який має поля ім'я, вік, туфелька яку він знайшов.
// -- за допоиоги циклу знайти яка попелюшка повинна бути з принцом
// ==============================================
// class Popelushka{
//     constructor(name, age, footSize){
//         this.name = name
//         this.age = age
//         this.footSize = footSize
//     }
// }
// let arrPopelushki =[]
// for (let i = 1; i <= 10; i++){
//     let popelushki = new Popelushka(`popelushka${i}`, i+20, i+10)
//     arrPopelushki.push(popelushki)
// }
// class Prince{
//     constructor(name, age, boots){
//         this.name = name
//         this.age = age
//         this.boots = boots
//     }
// }
// let prince = new Prince('Richard', 30, 14)
// for (let i of arrPopelushki) {
//     if (i.footSize === prince.boots){
//         console.log(`${prince.name} finde here ${i.name}`)
//     }
// }

//7==============================================
// -створити функцію конструктор попелюшка з полями ім'я, вік, розмір ноги
// --Створити 10 попелюшок , покласти їх в масив
// --Сторити об'єкт типу "принц" за допомоги функції конструктора з полями ім'я, вік, туфелька яку він знайшов, та функцію "пошук попелюшки"
// -- функція повинна приймати масив попелюшок, та шукає ту котра йому підходить
// ==============================================
// function Popelushka(name, age, footSize) {
//     this.name = name
//     this.age = age
//     this.footSize = footSize
// }
//
// let arrPopelushki = []
// for (let i = 1; i <= 10; i++) {
//     let popelushki = new Popelushka(`popelushka${i}`, i + 20, i + 10)
//     arrPopelushki.push(popelushki)
// }
// function Prince(name, age, boots) {
//     this.name = name
//     this.age = age
//     this.boots = boots
// }
// let prince = new Prince('Richard', 30, 18)
// for (let i of arrPopelushki) {
//     if (i.footSize === prince.boots) {
//         console.log(`${prince.name} finde here ${i.name}`)
//     }
// }
